// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// em
Rcpp::List em(Eigen::VectorXd& y, Eigen::MatrixXd& x, Eigen::VectorXd& theta, unsigned int maxit, double eps, bool verbose);
RcppExport SEXP _IBpaper_em(SEXP ySEXP, SEXP xSEXP, SEXP thetaSEXP, SEXP maxitSEXP, SEXP epsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(em(y, x, theta, maxit, eps, verbose));
    return rcpp_result_gen;
END_RCPP
}
// logistic_misclassification_mle
Eigen::VectorXd logistic_misclassification_mle(Eigen::MatrixXd& x, Eigen::ArrayXd& y, double fp, double fn);
RcppExport SEXP _IBpaper_logistic_misclassification_mle(SEXP xSEXP, SEXP ySEXP, SEXP fpSEXP, SEXP fnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type fp(fpSEXP);
    Rcpp::traits::input_parameter< double >::type fn(fnSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic_misclassification_mle(x, y, fp, fn));
    return rcpp_result_gen;
END_RCPP
}
// inverse_FIM
Eigen::MatrixXd inverse_FIM(Eigen::MatrixXd& x, Eigen::VectorXd& beta, double fp, double fn);
RcppExport SEXP _IBpaper_inverse_FIM(SEXP xSEXP, SEXP betaSEXP, SEXP fpSEXP, SEXP fnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type fp(fpSEXP);
    Rcpp::traits::input_parameter< double >::type fn(fnSEXP);
    rcpp_result_gen = Rcpp::wrap(inverse_FIM(x, beta, fp, fn));
    return rcpp_result_gen;
END_RCPP
}
// par_bootstrap_mle
Eigen::MatrixXd par_bootstrap_mle(Eigen::VectorXd& beta, Eigen::MatrixXd& x, unsigned int B, unsigned int seed, unsigned int ncores, double fp, double fn);
RcppExport SEXP _IBpaper_par_bootstrap_mle(SEXP betaSEXP, SEXP xSEXP, SEXP BSEXP, SEXP seedSEXP, SEXP ncoresSEXP, SEXP fpSEXP, SEXP fnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type B(BSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< double >::type fp(fpSEXP);
    Rcpp::traits::input_parameter< double >::type fn(fnSEXP);
    rcpp_result_gen = Rcpp::wrap(par_bootstrap_mle(beta, x, B, seed, ncores, fp, fn));
    return rcpp_result_gen;
END_RCPP
}
// nll_max_beta
double nll_max_beta(const Eigen::VectorXd& beta, const double& sigma, const Eigen::VectorXd& y, const Eigen::MatrixXd& x, const double& lambda);
RcppExport SEXP _IBpaper_nll_max_beta(SEXP betaSEXP, SEXP sigmaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(nll_max_beta(beta, sigma, y, x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// nll_max_sigma
double nll_max_sigma(const double& sigma, const Eigen::VectorXd& beta, const Eigen::VectorXd& y, const Eigen::MatrixXd& x, const double& lambda);
RcppExport SEXP _IBpaper_nll_max_sigma(SEXP sigmaSEXP, SEXP betaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(nll_max_sigma(sigma, beta, y, x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// logLike_negbin
double logLike_negbin(const Eigen::VectorXd& beta, const double& sigma, const Eigen::VectorXd& y, const Eigen::MatrixXd& x, const double& lambda);
RcppExport SEXP _IBpaper_logLike_negbin(SEXP betaSEXP, SEXP sigmaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(logLike_negbin(beta, sigma, y, x, lambda));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_IBpaper_em", (DL_FUNC) &_IBpaper_em, 6},
    {"_IBpaper_logistic_misclassification_mle", (DL_FUNC) &_IBpaper_logistic_misclassification_mle, 4},
    {"_IBpaper_inverse_FIM", (DL_FUNC) &_IBpaper_inverse_FIM, 4},
    {"_IBpaper_par_bootstrap_mle", (DL_FUNC) &_IBpaper_par_bootstrap_mle, 7},
    {"_IBpaper_nll_max_beta", (DL_FUNC) &_IBpaper_nll_max_beta, 5},
    {"_IBpaper_nll_max_sigma", (DL_FUNC) &_IBpaper_nll_max_sigma, 5},
    {"_IBpaper_logLike_negbin", (DL_FUNC) &_IBpaper_logLike_negbin, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_IBpaper(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
